package com.wufang.client.backend;
/**
 * 这是客户端和服务器端保持通信的线程
 */
import java.net.Socket;
import java.io.*;

import com.wufang.client.frontend.ChattingWindow;
import com.wufang.client.frontend.FriendList;
import com.wufang.client.utilities.ChattingWindowsManager;
import com.wufang.client.utilities.ClientThreadsManager;
import com.wufang.client.utilities.FriendListsManager;
import com.wufang.common.Info;
import com.wufang.common.InfoType;

public class ClientThread extends Thread{

	private  Socket s;
	
	public Socket getSocket(){
		return this.s;
	}
	public  ClientThread(Socket s){
		this.s = s;
	}
	
	public void sendInfo(Info out){
		try {
			ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
			oos.writeObject(out);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private Info receiveInfo(){
		try {
			ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
     		Info in = (Info)ois.readObject();
     		return in;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	public void run(){
		ChattingWindowsManager cwm = ChattingWindowsManager.getInstance();
		FriendListsManager flm = FriendListsManager.getInstance();
		while(true){
			
			try {
				
				Info in = this.receiveInfo();
//				System.out.println(in.getSender() + " said to " + in.getReceiver() + " : " + in.getMessage() + " at " + in.getSendedtime());
				//把从服务器中读到的消息发送到该显示的聊天界面上
				if(in.getInfoType().equals(InfoType.chatting_message)){
					ChattingWindow cw = cwm.getChattingWindow(in.getReceiver()+ " "+ in.getSender());
					cw.setjta(in);
				}else if(in.getInfoType().equals(InfoType.return_onlineFriends)){
					String usename = in.getReceiver();
					System.out.println("客户端收到了返回的在线用户列表 ： " + in.getMessage());
					FriendList fl = flm.getClientThread(usename);
					if(fl!=null){
						fl.update_onlineFriends(in);
					}
//					System.out.println("客户端收到了返回的在线用户列表 ： " + in.getMessage());
				}else if(in.getInfoType().equals(InfoType.notify_someone_off)){
					String receiver = in.getReceiver();
					String off_usename = in.getMessage();
					System.out.println("客户端受到了服务器返回的离线用户信息  " + in.getMessage());
					FriendList fl = flm.getClientThread(receiver);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
}
